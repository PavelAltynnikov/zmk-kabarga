/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <220>; };

&mt { quick_tap_ms = <220>; };

/ {
    macros {
        numdot: numdot {
            label = "ZM_numdot";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N4 &kp KP_N6>,
                <&macro_release>,
                <&kp LALT>;
        };

        grtsgn: grtsgn {
            label = "ZM_grtsgn";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N6 &kp KP_N2>,
                <&macro_release>,
                <&kp LALT>;
        };
    };
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
};

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
&kp TILDE  &kp Q        &kp W       &kp E        &kp R         &kp T            &kp Y           &kp U           &kp I       &kp O       &kp P           &kp LBKT
&none      &hm LCTRL A  &hm LWIN S  &hm LALT D   &hm LSHIFT F  &kp G            &kp H           &hm RSHIFT J    &hm RALT K  &hm RWIN L  &hm RCTRL SEMI  &kp SQT
&kp CAPS   &kp Z        &kp X       &kp C        &kp V         &kp B            &kp N           &kp M           &kp RBKT    &kp DOT     &kp COMMA       &kp DOT
                                    &lt 1 ENTER  &lt 1 TAB     &lt 1 SPACE      &lt 2 BSPC      &lt 2 DEL       &lt 2 ESC
                        >;
                };
                layer_1 {
                        bindings = <
&kp ENTER  &none               &none              &none              &kp RA(LBKT)         &kp RA(RBKT)         &none     &none             &none          &none          &none               &none
&kp TAB    &hm LCTRL NUMBER_7  &hm LWIN NUMBER_2  &hm LALT NUMBER_4  &hm LSHIFT NUMBER_9  &kp NUMBER_0         &kp PLUS  &hm RSHIFT MINUS  &hm RALT PLUS  &hm RWIN BSLH  &hm RCTRL NUMBER_8  &none
&kp SPACE  &kp NUMBER_1        &kp RA(SLASH)      &kp NUMBER_3       &kp RA(SQT)          &none                &none     &kp RA(COMMA)     &kp RA(DOT)    &kp NUMBER_5   &kp NUMBER_6        &none
                                                  &none              &none                &none                &kp BSPC  &kp DEL           &kp ESC
                        >;
                };
                layer_2 {
                        bindings = <
&kp ESC   &none      &none     &none              &none                &none             &kp KP_NUMLOCK   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_SLASH  &kp KP_ASTERISK
&kp DEL   &kp LCTRL  &kp LWIN  &hm LALT NUMBER_6  &hm LSHIFT NUMBER_5  &none             &kp EQUAL        &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_MINUS  &kp KP_PLUS
&kp BSPC  &none      &none     &none              &none                &none             &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_COMMA  &kp KP_DOT
                               &kp ENTER          &kp TAB              &kp SPACE         &none            &none            &none
                        >;
                };
        };
};
